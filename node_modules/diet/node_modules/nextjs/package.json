{
  "name": "nextjs",
  "version": "0.0.3",
  "description": "The fastest async handler in node.js",
  "keywords": [
    "next",
    "async",
    "async handler",
    "async functions"
  ],
  "bugs": {
    "url": "http://github.com/adamhalasz/next/issues",
    "email": "mail@adamhalasz.com"
  },
  "license": "MIT",
  "author": {
    "name": "Halász Ádám",
    "email": "mail@adamhalasz.com",
    "url": "http://adamhalasz.com/"
  },
  "main": "index.js",
  "engines": {
    "node": ">=0.8.21"
  },
  "readme": "# Next  \nBecause asynchronous calls suck out your brain without a proper async handler. This one is just 4 lines yet it solves a huge issue.\n\n### Install\n```config\n\tnpm install nextjs\n```\n\n### How it works?\n1. Create a `Next Instance`: `var next = new Next(2, finish)`\n2. Then you call `next()` as many times as you specified in the `count`. In this example it is *2*.\n3. After `next` was called *2 times*, the `finish` function will be called.\n\n### Example\n```javascript\n\t// Include\n\tvar Next = require('nextjs');\n\t\n\t// CREATE a Next Instance\n\tvar next = new Next(2, finish);\n\t\n\t// Log Start\n\tconsole.log('start');\n\t\n\t// Will happen after 5 seconds passed\n\tsetTimeout(function(){ console.log('A'); next(); }, 5000); \n\t\n\t// Will happen after 2 seconds passed\n\tsetTimeout(function(){ console.log('B'); next(); }, 2000); \n\t\n\t// Will happen in the end after 5 seconds passed\n\tfunction finish(){ console.log('finished'); } \n\t\n\t// output result\n\t// 0 second => start\n\t// 2 second => B\n\t// 5 second => A\n\t// 5 second => finished\n```\n\n## Next parameters\n- **count**: the number of times you will have to call the `next()` instance. `required` `integer`\n- **finish**: finishing callback `required` `function`\n\n## Key features\n- It's just 4 lines - `0.16kb`\n- Easy to use\n- Its part of `dietjs`\n",
  "readmeFilename": "Readme.md",
  "_id": "nextjs@0.0.3",
  "_from": "nextjs@>=0.0.1"
}
