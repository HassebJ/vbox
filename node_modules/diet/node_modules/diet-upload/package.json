{
  "name": "diet-upload",
  "version": "0.0.3",
  "description": "File upload api for node.js",
  "keywords": [
    "upload",
    "files",
    "mysql",
    "diet",
    "form",
    "multipart",
    "formidable",
    "async upload"
  ],
  "bugs": {
    "url": "http://github.com/adamhalasz/diet-uploads/issues",
    "email": "mail@adamhalasz.com"
  },
  "license": "MIT",
  "author": {
    "name": "Halász Ádám",
    "email": "mail@adamhalasz.com",
    "url": "http://adamhalasz.com/"
  },
  "dependencies": {
    "formidable": ">=1.0.9"
  },
  "main": "index.js",
  "engines": {
    "node": ">=0.8.21"
  },
  "readme": "## Upload Module  \nNode.js upload module built on formidable. It's fast and supports progress tracking and mysql.\n\n\n### Install\nIf you have `diet` it's already installed.\n```\nnpm install diet-upload\n```\n\n### Todo:\n- Simplify API\n- Better Documentation\n- Create an independent image processing API.\n\n### Node.js Setup:\n```\n// Setup\nupload = new Upload({\n\t// Original Paths\n\tpublic\t: '/root/static/files/',\n\tpath\t: '/root/static/files/uploads/',\n\ttmp\t\t: '/root/mes/tmp/',\n\t// Custom upload paths\n\tpaths : {\n\t\t// Images\n\t\t'image/gif' : 'uploads/images/',\n\t\t'image/jpg' : 'uploads/images/',\n\t\t'image/png' : 'uploads/'\n\t},\n\t// Mysql\n\tmysql: app.mysql\n});\n```\n\n### Example:\n```\n// LISTENER function\nupload.listener = function(name, configure){\n\t// REGISTER upload type contents\n\tupload.contents[name] = {};\n\t\n\t// REGISTER upload path\n\tvar regex = new RegExp('^\\/upload\\/'+name+'\\/+([a-zA-Z0-9\\-\\_\\.!@#$%^&*]+)$', 'i'); // NO g JUST i\n\tapp.post.simple(regex, function(request, response, mysql){\n\t\tvar key = request.params[1];\n\t\tvar options = configure(request, response, key);\n\t\tupload.load(request, response, options);\n\t}, true); // MySQL must be disabled if Upload Streaming is enabled\n\t\n\t// REGISTER content result path\n\tvar regex = new RegExp('^\\/upload\\/contents\\/'+name+'\\/+([a-zA-Z0-9\\-\\_\\.!@#$%^&*]+)$', 'i');\n\tapp.post.simple(regex, function(request, response, mysql){\n\t\tvar key = request.params[1];\n\t\t\n\t\tresponse.end(JSON.stringify(upload.contents[name][key]));\n\t\t\n\t\t// REMOVE contents from memory\n\t\tdelete upload.contents[name][key];\n\t\t\n\t\t// REMOVE the upload key from memory\n\t\tkeys.remove(key);\n\t}, true);\n}\n\n// Avatar Uploading\nupload.listener('avatar', function(request, response, key){ return {\n\tpath \t\t: 'uploads/avatars/',\n\tlog\t\t\t: app.path + '/logs/uploads/avatars.log',\n\tsize_total\t: 3, // MB \n\tsize_each\t: 3, // MB \n\tkey\t\t\t: key,\n\tmime\t\t: ['image/png', 'image/gif', 'image/jpg', 'image/jpeg'],\n\tcommands\t: {\n\t\t'images' : {\n\t\t\tthumbnail : { \n\t\t\t\tpath   : 'uploads/avatars/',\n\t\t\t\twidth  : 64,\n\t\t\t\theight : 64\n\t\t\t}\n\t\t},\n\t},\n\tend: function(request, response, errors, fields, files, mysql){\n\t\t// The avatar is the first file in the files list\n\t\tvar avatar = files[0];\n\t\tresponse.setHeader(\"Content-Type\", \"text/plain\");\n\t\t\n\t\t// REMOVE the upload key\n\t\tkeys.remove(key);\n\t\t\n\t\t// INSERT avatar into the database\n\t\tmysql('INSERT INTO avatars (owner, name, path, mime, size) '\n\t\t\t+ 'VALUES ('+ request.cookies.id  + ', \"'\n\t\t\t\t\t\t+ sanitize(avatar.name) + '\", \"'\n\t\t\t\t\t\t+ sanitize(avatar.path) + '\", \"'\n\t\t\t\t\t\t+ sanitize(avatar.mime) + '\", '\n\t\t\t\t\t\t+ avatar.size\n\t\t\t+')', \n\t\tfunction(rows, onerror){\n\t\t\tonerror('error on upload.js - upload avatar error!');\n\t\t\tresponse.end(JSON.stringify(files));\n\t\t\trequest.mysql_close();\n\t\t});\n\t}\n\n}});\n```",
  "readmeFilename": "Readme.md",
  "_id": "diet-upload@0.0.3",
  "_from": "diet-upload@>=0.0.1"
}
