{
  "name": "diet-comet",
  "version": "0.0.3",
  "description": "The best COMET module for node.js",
  "keywords": [
    "comet",
    "real time",
    "real time notifications",
    "notifications",
    "push",
    "real time push",
    "messaging",
    "group messaging"
  ],
  "bugs": {
    "url": "http://github.com/adamhalasz/diet-comet/issues",
    "email": "mail@adamhalasz.com"
  },
  "license": "MIT",
  "author": {
    "name": "Halász Ádám",
    "email": "mail@adamhalasz.com",
    "url": "http://adamhalasz.com/"
  },
  "main": "index.js",
  "engines": {
    "node": ">=0.8.21"
  },
  "readme": "# **Comet.js v.0.5** - It's is a flexible long polling module for node.js with support for unlimited listener types, multi and single listeners, custom sender identification. It has mysql integration, and a simple API. \n\n## Dependencies \t\t\t\t\t \n---------------------------------------\nThe module is based on the application framework and it uses mysql as a database handler.\n\n## A tiny chat client in less than 55 lines\t\t \n---------------------------------------\n\n### Server side\nYou will need to include this in your `server.js` like `use('comet.js')`\n```\n\t// REQUIRE comet module\n\tcomet = new Comet({\n\t\tapp\t\t : app,\n\t\tdatabase : 'my_projects_database',\n\t\tid\t\t : function(request, response){ return request.cookies.sid; },\n\t\tsender\t : function(request, mysql, callback){ \n\t\t\tmysql.users.getBy('id', request.cookies.id, function(users){\n\t\t\t\tcallback(new User(users[0])); \n\t\t\t});\n\t\t}\n\t});\n\t\n\t// COLLECT Listeners\n\tvar everyone = [];\n\tcomet.listener('home', function(request, package, mysql, options, end){\n\t\tend(everyone, options, false);\n\t});\n\t\n\t// JOIN event\n\tvar join \t\t= comet.actions('join');\n\tjoin.onEmit \t= baseEmit\n\tjoin.onSubmit \t= function(mysql, request, response, package, private, listener, end){\n\t\teveryone.push(request.cookies.id);\n\t\tend();\n\t}\n\t\n\t// LEAVE event\n\tvar leave \t\t= comet.actions('leave');\n\tleave.onEmit \t= baseEmit;\n\tleave.onSubmit \t= function(mysql, request, response, package, private, listener, end){\n\t\teveryone.remove(request.cookies.id);\n\t\tend();\n\t}\n```\n\n### Client Side\nYou will have to include the auto generated `/scripts/comet.js`\n```html\n\t<script src=\"/scripts/comet.js\" type=\"text/javascript\"></script>\n```\t\n```javascript\n\t<script>\n\t\twindow.onload = function(){\n\t\t\t// PUSH join\n\t\t\tcomet.push({ type: 'join', listeners: ['home'] });\n\t\t\t\n\t\t\t// PUSH messages\n\t\t\tcomet.push({ type: 'message', listeners: ['home'], message: 'Hello World!' });\n\t\t\tcomet.push({ type: 'message', listeners: ['home'], message: 'This is comet.js!' });\n\t\t}\n\t\t\n\t\t// PUSH leave\n\t\twindow.onunload = function(){\n\t\t\tcomet.push({ type: 'leave', listeners: ['home'] });\n\t\t}\n\t\n\t\t// LISTEN on join, leave and message events\n\t\tcomet.ping.join \t= function(package){ console.log('joined', package); }\n\t\tcomet.ping.leave \t= function(package){ console.log('leaved', package); }\n\t\tcomet.ping.message \t= function(package){ console.log(package.sender, ' -> ', package.message); }\n\t</script>\n```\n\n## Server side module variables\t\t\t\t\t\t\t\n---------------------------------------\n### app: `object` `required`\n+ an `Application()` Object\n\n### database: `string` `required`\t\t\t\t\n+ custom mysql database name\n\t\n### id: `function` `required`\n+ internal sender ID identifier\n+ this can be a string or a number, it is usually the `request.cookies.id`\n\n### sender: `function` `required`\n+ overall sender identifier \n+ this can be anything, but it's usually a user Object with name, location etc..\n+ it is usually used on the receivers side to show who sent the message\n\n### emitOnEndFilter: `function` `optional`\n+ a filter function which runs just before the emit, which has the right to pass or stop the emit event\n+ it can be used for ignore list filtering\n\n## Client side implementaton\t\t\t\t\t\t\t\n---------------------------------------\nWhen you use the comet module on server side, a path for the client side js file will be generated in your `public/scripts/comet.client` what you can include in your html file like this:\n```html\n\t<script src=\"/scripts/comet.js\" type=\"text/javascript\"></script>\n```\t\nAfter you included the `comet.js` file you will have access to the global `comet` object.\n\n### Initializing:\n```javascript\n\tcomet.controller(); \t\t\t// start the controller\n\tsetTimeout(comet.worker, 1000); // starts the worker 1 second later for safety\n``` \nAfter you initialized you don't have to worry about anything except sending and receiving information in real-time with `push` function and `ping` object.\n\n### comet.push(package)\nThis function broadcasts a message with the specified `package`:\n\n+ **type**\t\t\t: This is a custom type of the message action  `string` `required`\n+ **listeners**\t\t: If it's an array then it will be sent to a group of people, if it's a string or an intenger then it will be sent to that single client. `string, integer or array` `required`\n+ **parameters**\t: whatever else you put in the package it is considered as package parameters. `optional` `anything`\n\nAn example push request:\n```javascript\n\tcomet.push({\n\t\ttype: 'join',\n\t\tlisteners: ['family'],\n\t\tmy_custom_message: 'Hi family members!'\n\t})\n```\n\n### comet.ping\nThis is where you can assign listeners to the actions, for example you can listen to the join event above with:\n```javascript\n\tcomet.ping.join = function(package){\n\t\tconsole.log(package) \n\t\t// output => { type: 'join', listeners: ['family'], my_custom_message: 'Hi family members!' }\n\t}\n```\n\t\n## Versions \t\t\t\t\t\t\t\t\t  \n---------------------------------------\n### New in v0.5 - (February 13, 2013):\n+ Automatic client js path `app.public+/scripts/comet.client`\n+ Submit Before Emit Introduced\n+ New comet.action interface to support `submit_before_emit`\n+ Each package now is stamped with a Unique Package ID (`package._stamp`)\n+ Each request is stamped with a `request.comet_id` by `COMET.id()`\n+ Improved documentation\n\t\n### New in v0.4 - (October 3, 2012):\n+ Totally stand-alone module\n+ Accepts variables\n+ Cleaned-up inner module interface\n\t\n### New in v0.3 - (Summer 2012):\n+ Half stand alone module\n+ Pressure control with `Controller/workers` mechanism\n+ 99% message transmission success\n+ Several bug fixes\n+ Custom listeners\n\t\n### New in v0.2 - (Spring 2012)\n+ Private object in package\n+ Server side comet.push()\n+ Better & stand alone client-side comet modules\n\t\n### New in v0.1 - (Summer 2011):\n+ Custom message types\n\n## TODO \t\t\t\t\t\t\t\t\t  \n---------------------------------------\n+ Support database handlers other than mysql\n+ Shortcuts for messaging channels, like create a new channel instance with already setup `join`, `leave`, `create`, `update`, `delete` types and register the `channel` listener.\n",
  "readmeFilename": "Readme.md",
  "_id": "diet-comet@0.0.3",
  "_from": "diet-comet@>=0.0.1"
}
