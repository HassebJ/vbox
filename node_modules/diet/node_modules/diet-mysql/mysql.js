var MySQL 	= require('./node_modules/mysql');

module.exports = function(options, db) {
	var SQLMap 	= require('./node_modules/sqlmap');
	// Resolve Current Database
	//if(isset(db)){ options.database = (typeof db == 'function') ? db() : db ; }
	if(!options.database) options.database = 'mysql';
	
	this.map = function(){
		
		if(typeof arguments[0] == 'function'){
			var callback = arguments[0];
			var mysql_options = options;
		} else {
			var mysql_options  = arguments[0];
			var callback = arguments[1];
		}
		
		new SQLMap(mysql_options, function(mysql){
			//console.log('Application Database Mapping is ready for '+mysql_options.database+'!')
			callback(mysql);
		});
	}
	
	this.connect = function(callback){
		var connection = MySQL.createConnection(options);
		
		connection.connect(function(error) {
			if(error){ 
				var date = new Date();
				throw new Error('(' + date.toUTCString() +') : MYSQL ERROR : ' + error);
			} else {
				connection.database = options.database;
				callback(connection, error);
			}
		});
		return connection;
	}
	return this;
}

/*
	# Prepare Function Context
	This function creates a custom local scope for each custom mysql function
	adds request, response and mysql as a hidden local variable
	
	It's really good because you can use these locals without calling them
	
	mysql.users.customFunction = function(argument1, argument2){
		mysql('SHOW TABLES', ...); <-- mysql is defined in the hidden context 
	}
*/
var default_functions = ['create', 'save', 'saveMore', 'update', 'delete', 'query', 'connect', 'get', 'fields'];

// RECREATE arguments
function FunctionInstance(options){

	// RETURN clean instance
	return function(){
		var functio_reference = mysql[options.index][options.function_index];
		var args = {};	
					
		for(var i = 0; i < arguments.length; i++){
			var name = functio_reference.argument_names[i].replace(/([\s\n\t\r]+)/gi, '');
			// for debug
			//console.log(i, arguments[i], name);
			args[name] = arguments[i];
		}
		
		// APPEND arguments to the sandbox
		if(isset(functio_reference.sandbox)){
			functio_reference.sandbox = hook(functio_reference.sandbox, args);
		} else {
			functio_reference.sandbox = hook(initSandbox, args);
		}
		
		// RUN function in the prepared context
		vm.runInNewContext(functio_reference.CODE, functio_reference.sandbox);
	}
	
}

function prepare_function_context(mysql_object, request, response){
	// FOR EACH mysql properties
	for(index in mysql){
		var objects = mysql[index];
		if(isObject(objects)){
		
			// FOR each function in mysql
			for(function_index in objects){
				var funktion = objects[function_index];
				
				// WHICH IS NOT a default function 
				if(typeof funktion == 'function' 
					&& !inArray(function_index, default_functions)
					&& !objects[function_index].CHANGED
				){
					////////// START
					// CREATE SANDBOX
					var initSandbox 		= {};
					initSandbox 			= hook(global, {}); // add globals
					initSandbox.mysql 		= mysql_object; 	// add mysql
					initSandbox.request 	= request; 			// add request
					initSandbox.response 	= response; 		// add response
					
					// CONVERT function to string and split it by new lines
					var string = funktion.toString();
					var lines  = string.split('\n');	
						
					// GET function argument names
					var first_line 	   = lines.splice(0,1)[0]; // REMOVE [FIRST] line of function
					var argument_names = first_line.substr(10);
						argument_names = argument_names.substr(0, argument_names.length-2);
						argument_names = argument_names.split(',');
					
					// REMOVE [LAST] line of function
					lines.splice(lines.length-1, 1);
					
					// CREATE new instance
					// we need this to save the options
					// provided below (we are in FOR loops)
					var instance = new FunctionInstance({
						argument_names	: argument_names,
						index			: index,
						function_index	: function_index,
						sandbox			: initSandbox
					});
					
					// CREATE a new prepared context for the function
					objects[function_index] = instance;
					
					// SAVE properties
					objects[function_index].sandbox 		= initSandbox;
					objects[function_index].argument_names 	= argument_names;
					objects[function_index].CHANGED 		= true;
					objects[function_index].CODE 			= lines.join('\n');
	
					
					/*
					// FOR DEBUG
					console.log('NOT YET CHANGED');
					console.log('mysql.'+index+'.'+function_index);
					console.log(objects[function_index].CODE);
					console.log('\n\n');
					*/
					
					////////// END
				} else if(objects[function_index].CHANGED){
					/*
					// FOR DEBUG
					console.log('CHANGED');
					console.log('mysql.'+index+'.'+function_index);
					console.log(objects[function_index].CODE);
					console.log('\n\n');
					*/
					
					// CHANGE sandbox
					objects[function_index].sandbox.mysql 	 = mysql_object;
					objects[function_index].sandbox.request  = request;
					objects[function_index].sandbox.response = response;
				}
			}
		}	
	}
	return mysql_object;
}

mysql_wrapper = function(request, response, mysql, custom_map){

	function MYSQL(query, callback, async){
		var options = (isset(async)) ? { async : false } : {} ;
		mysql.query(query, function(error, rows){
			if(isset(error)){
				throw new Error(error + '\n -> FULL MYSQL QUERY: ' + query);
			}
			error_handler = function(message){
				if(isset(error)){ 
					var message = (isset(message)) ? message : '' ;
					console.error(message);
					return error;
				}
			}
			callback(rows, error_handler);
		});
	}
	
	var clean_mysql_object = hook(MYSQL, {});
	for(index in mysql){
		delete clean_mysql_object[index];
	}
	
	// APPEND custom mysql functions to the mysql instance
	var custom_sql = prepare_function_context(MYSQL, request, response);
	
	for(var index in mysql){
		MYSQL[index] = mysql[index];
	}
	
	for(var index in custom_map){
		MYSQL[index] = custom_map[index];
	}
	
	// APPEND custom functions
	for(var index in custom_sql){
		MYSQL[index] = custom_sql[index];
	}
	
	return MYSQL;
};

// Sanitize string for MySQL use (mysql_real_escape_string() equivalent from PHP)
sanitize = function(str) {
    return str.replace(/[\0\x08\x09\x1a\n\r"'\\]/g, function (char) {
        switch (char) {
            case "\0":
                return "\\0";
            case "\x08":
                return "\\b";
            case "\x09":
                return "\\t";
            case "\x1a":
                return "\\z";
            case "\n":
                return "\\n";
            case "\r":
                return "\\r";
            case "\"":
            case "'":
            case "\\":
                return "\\"+char; // prepends a backslash to backslash, percent,
                                  // and double/single quotes
        }
    });
}

