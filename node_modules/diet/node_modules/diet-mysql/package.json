{
  "name": "diet-mysql",
  "version": "0.0.9",
  "description": "Dead simple no-sql like mysql wrapper. This MySQL runs on Diet.",
  "keywords": [
    "mysql",
    "mysql wrapper",
    "nosql like mysql",
    "mysql interface",
    "simple mysql",
    "database",
    "database mapping",
    "database engine",
    "diet"
  ],
  "bugs": {
    "url": "http://github.com/adamhalasz/diet-mysql/issues",
    "email": "mail@adamhalasz.com"
  },
  "license": "MIT",
  "dependencies": {
    "mysql": ">=2.0.0-alpha7"
  },
  "author": {
    "name": "Halász Ádám",
    "email": "mail@adamhalasz.com",
    "url": "http://adamhalasz.com/"
  },
  "main": "index.js",
  "engines": {
    "node": ">=0.8.21"
  },
  "readme": "# Diet: MySQL   \nIn Diet you interact with MySQL like it's a No-SQL database. MySQL is the default database engine for Diet. It's included in every `GET` and `POST` request unless you use the `app.get.simple` or `app.post.simple` methods.\n\n### Philosophy\n- With this module you don't have to worry about sql injection and string escaping.\n- Every table is mapped into a CRUD ready object oriented JSON environment when the Diet Application initializes.\n- You can use MySQL in a simple NO-SQL style with the Mapped tables inside the routes, but you can still have access to advanced custom queries with the `mysql('query')` scheme.\n- The module is embedded inside every `GET` and `POST` route, for easy access, but it can be turned off for performance tuning.\n\n### Example Usage:\nLet's say you have a database `awesome_project`, with these tables: `users`, `posts`, `tags`. You can access and modify them like this in an `app.get` or `app.post`:\n\n```javascript\napp.get('/users', function(request, response, mysql){ // <-- mysql is included in every route\n\t// GET user_id from the url\n\tvar user_id = request.query.id; // from: /users?id=42\n\t\n\t// GET users\n\tmysql.users.getBy('id', user_id, function(rows){\n\t\tresponse.end(JSON.stringify(rows));\n\t});\n});\n```\n\n### Handling multiple asynchronous mysql requests with `next` \n\n```javascript\napp.get('/call', function(request, response, mysql){\n\t// NEXT async handler\n\tvar next = new Next(3, finish);\n\tvar data = {};\n\t\n\t// GET users\n\tmysql.users.get('id', user_id, function(rows, onerror){\n\t\tconsole.log('users:', rows);\n\t\tdata.users = rows;\n\t\tnext();\n\t});\n\t\n\t// GET posts\n\tmysql.posts.get('id', user_id, function(rows, onerror){\n\t\tconsole.log('posts:', rows);\n\t\tdata.posts = rows;\n\t\tnext();\n\t});\n\t\n\t// GET tags\n\tmysql.tags.get('name', 'tag_name', function(rows, onerror){\n\t\tconsole.log('tags:', rows);\n\t\tdata.tags = rows;\n\t\tnext();\n\t});\n\t\n\t// Finishing function\n\tfunction finish(){\n\t\tconsole.log('finished', data); // outputs: { users: [..], posts: [..], tags: [..] }\n\t\tresponse.end();\n\t\tmysql.end();\n\t}\n});\n```\n\n### MySQL Functions\n- **mysql.table.create(row, callback)**: \n\n```javascript\n// create a user\nmysql.users.create({ \n\tusername: 'audrey', \n\tpassoword: '123456'\n}, function(rows, onerror){\n\t// ...\n});\n```\n\n- **mysql.table.save(row, callback)**: \n\n```javascript\n// this either creates or updates the user, depending on the unique keys\nmysql.users.save({ \n\tusername: 'audrey', \n\tpassoword: '999999' // <-- we changed the password for audrey\n}, function(rows, onerror){\n\t// ...\n});\n```\n\n- **mysql.table.saveMore(row, callback)**: \n\n```javascript\n// SAVE MORE - save multiple rows at once\nmysql.posts.saveMore([\n\t{ id: 1, title: 'Hello World!' },\n\t{ id: 2, title: 'Hello Again!' }\n], function(rows, onerror){\n\t// ...\n});\n```\n\n- **mysql.table.update(where, value, whatToUpdate, callback)**: \n\n```javascript\n// UPDATE user\nmysql.users.update('id', '42', {\n\tusername: 'adam',\n\tpassword: 123123\n}, function(rows, onerror){\n\t// ...\n});\n```\n\n- **mysql.table.get(by, value, callback)**: \n\n```javascript\n// GET a row with by a parameter like ID or slug\n// 'by'\t\t\t: the parameter to get with\n// 'what`\t \t: the parameter value\n// 'option1' \t: either `callback` or `options`\n// 'option2' \t: optional `callback` if `option1` is `options`  \n\n// Find users with id 42\n// SQL: SELECT * FROM users WHERE id = 42\nmysql.users.get('id', 42, function(rows, onerror){\n\tconsole.log(rows);\n});\n\n// Find all users who live in Budapest then order ascending by city and limit result matches to 5\n// SQL: SELECT * FROM users WHERE `city` = 'Budapest' ORDER BY `city` ASC, LIMIT 5\nmysql.users.get('city', 'Budapest', { \n\torder: 'city ASC', \n\tlimit: 5 \n}, function(rows, onerror){\n\tconsole.log(rows);\n});\n```\n\n- **mysql.table.delete(by, value, callback)**: \n\n```javascript\n// Delete users with id 21\n// SQL: DELETE FROM users WHERE `id` = 21\nmysql.users.delete('id', 21, function(rows, onerror){\n\t// ...\n});\n\n// DELETE with MULTI where\n// this deletes every disabled user from San Francisco\n// SQL: DELETE FROM users WHERE `city` = 'San Francisco' AND disabled = true\nmysql.users.delete({\n\tcity \t : 'San Francisco',\n\tdisabled : true\n}, function(rows, onerror){\n\t// ...\n});\n```\n\n## Calling MySQL independently\nThis is useful if you want to create custom modules etc..\n\n```javascript\nvar MySQL = new MySQLClient({\n\thost \t : 'localhost',\n\tuser \t : 'root',\n\tpassword : '123123',\n\tdatabase : 'my_database'\n});\n\nMySQL.connect(function(mysqlObject, error){\n\t\n\t// Append MySQL Error to MySQL Object\n\tmysqlObject.error = error;\n\t\n\t// MySQL Query Wrapper\n\tvar sql = mysql_wrapper({}, {}, mysqlObject, {});\n\t\n\t// SELECT dictionary table from the database\n\tsql.query('SELECT * FROM dictionary', function(errors, rows){\n\t\tconsole.log(errors, rows);\n\t\tsql.end();\n\t});\n});\n```",
  "readmeFilename": "Readme.md",
  "_id": "diet-mysql@0.0.9",
  "_from": "diet-mysql@>=0.0.1"
}
