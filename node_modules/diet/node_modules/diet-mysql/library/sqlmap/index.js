// The MySQL Map
	
	ArrayToString = function(array){
		var string = '';
		array.forEach(function(item){
			string += item + ', ';
		})
		return string.substr(0, string.length-2);
	}
	ArrayToSQLString = function(array){
		var string = '';
		array.forEach(function(item){
			if(typeof item == 'string'){ item = '\''+item+'\'' }
			string += item + ', ';
		});
		return string.substr(0, string.length-2);
	}
	
	verifyValue = function(what, mysql){
		// if not strict number [integer]
		if(isset(what)){
			if(typeof what == 'object'){
				var value = what[0];
				var type = what[1];
				if(type == 'number'){
					return value;
				} else if (type == 'string') {
					return mysql.escape(what);
				}
			} else if(!isNumber(what)){
				
				// if equation [integer] ex: `table_name` - 1
				// WARNING this is a security hole
				// everything after `table_name` IS NOT ESCAPED
				if(isset(what.match(/\`([^`]+)\`\s*(\+|\-|\/|\*)\s*(.+)/gi))){
					return what;
						
				// if not equation [string]
				} else {
					return mysql.escape(what);
				}
			// if strict number [integer]
			} else {
				return what;
			}
		} else {
			return 'NULL';
		}
	}
	
	ObjectToUpdateString = function(objects, mysql){
		var string = '';
		
		for(index in objects){
			var value = verifyValue(objects[index], mysql);
			string += '`'+index + '` = '+value+', ';
		}
		return string.substr(0, string.length-2);
	}
	defineSQLValue = function(value){
		var type = (isNumber(value)) ? 'number' : typeof value ;
		return (type == 'string') ? '\'' + value + '\'' : value ;
	}
	
	module.exports = function(mysql_options, callback){
		var custom_name = (mysql_options.custom_name) ? mysql_options.custom_name : 'mysql';
		var map = global[custom_name] = {
			// Default extensions
			join: function(array){
				return '\'' + array.join('\', \'') + '\'';
			}
		};
		
		var MySQL = new MySQLClient(mysql_options);
		MySQL.connect(function(mysqlObject, error){
			// CREATE Custom MySQL Object for Comet Listen
			mysqlObject.error = error;
			var mysql = mysql_wrapper({}, {}, mysqlObject);
			
			// GET tables
			mysql('SHOW TABLES', function(tables){
				var next_table = new Next(tables.length, function(){
					callback(map);
				});
				
				// FOR EACH table
				tables.forEach(function(table){
					
					// SHORTHAND table
					var table = table['Tables_in_'+mysql.database];
					
					// GET table columns
					mysql('SHOW COLUMNS FROM ' + table, function(columns){
						
						// CLONE CRUD into table object
						map[table] = DataFrame(table, columns, mysql);
						
						
						
						// SAVE each field into table
						map[table].fields = [];
						columns.forEach(function(column){
							map[table].fields.push(column.Field);
						});
						next_table();
					});
					
				});
			});
			
		});

	};
	
	DataFrame = function(table, fields, mysql){
		var clone = {};
		
		clone.create = function(options, callback){
			// CREATE id
			if(!isset(options.id)){ options.id = uniqid() };
			
			// CREATE SQL
			var tsi = ''; // tables_string_insert
			var vsi = ''; // values_string_insert
			
			for(index in options){
				// for insert
				tsi += '`' + index + '`, ';
				vsi += ' ' + verifyValue(options[index], mysql) + ', ';
			}
			
			tsi = tsi.slice(0, tsi.length-2);
			vsi = vsi.slice(0, vsi.length-2);
			
			var sql = 'INSERT INTO ' + table 
			+ 	'('+tsi+') VALUES ('+vsi+') ';
			
			mysql(sql, function(rows, onerror){
				callback(rows, onerror, options.id, sql);
			});
		}
		clone.save = function(row, callback){
			// CREATE id
			if(!isset(row.id)){ row.id = uniqid() };
			
			// CREATE SQL
			var tsi = ''; // tables_string_insert
			var vsi = ''; // values_string_insert
			var us  = ''; // update_string
			
			for(index in row){
				// for insert
				tsi += '`' + index + '`, ';
				vsi += mysql.escape(row[index]) + ', ';
				
				// for update
				us +=  '`' + index + '` = '+ mysql.escape(row[index]) + ', '
			}
			
			tsi = tsi.slice(0, tsi.length-2);
			vsi = vsi.slice(0, vsi.length-2);
			us  =  us.slice(0,  us.length-2);
			
			var sql = 'INSERT INTO ' + table 
			+ 	'('+tsi+') VALUES ('+vsi+') '
			+	'ON DUPLICATE KEY UPDATE ' + us ;
	
			mysql(sql, function(rows, onerror){
				callback(rows, onerror, row.id, sql);
			});
		}
		/*
			SAVE MORE
			=================
			- Save multiple rows at once
			
			USAGE EXAMPLE:
			mysql.posts.saveMore([
				{ id: 1, title: 'Hello World!' },
				{ id: 2, title: 'Hello Again!' }
			], function(){
				
			})
		*/
		clone.saveMore = function(rows, callback){
			// SQL holders
			var tsi 	= null;
			var vsi_s 	= '';
			var us_s 	= '';
			//console.log('clone.saveMore :: rows', rows);
			var input = {};
			// FOR each row
			for(index in rows){
				if(rows.hasOwnProperty(index)) {    
					var row = rows[index];
					//console.log('row', index, row);
					// CREATE id
					if(!isset(row.id)){ row.id = uniqid() };
					
					// CREATE SQL
					var tsi 	= ''; 	// tables_string_insert
					var vsi 	= ''; 	// values_string_insert
					var us_s  	= ''; // update_string
					
					for(value_index in row){
						//console.log('value_index', value_index);
						if(isset(value_index)){
							// for insert
							var value = defineSQLValue(row[value_index]);
							tsi += '`' + value_index + '`, ';
							vsi += value + ', ';
							
							// for update
							us_s += '`' + value_index + '` = ' + 'VALUES(`'+value_index+'`), ';
						}
					}
					
					// ALL YOU HAVE TO DO IS TO CONSTRUCT A MULTI INSERT SQL QUERY
					// FROM THE INPUT ROWS OBJECT
					tsi 	 = tsi.slice(0, tsi.length-2);
					vsi_s 	+= '('+vsi.slice(0, vsi.length-2)+'), ';
					input[index] = row;
				}
			}
			
			vsi_s = vsi_s.slice(0, vsi_s.length-2);
			us_s = us_s.slice(0, us_s.length-2);
			
			var sql = 'INSERT INTO ' + table +' ('+tsi+')'
			+	' VALUES ' + vsi_s
			+	' ON DUPLICATE KEY UPDATE ' + us_s ; 
			
			//console.log('clone.saveMore :: sql\n', sql);
			
			mysql(sql, function(rows, onerror){
				callback(rows, onerror, input, sql);
			});
		};
		
		/*
			GET a row with by a parameter like ID or slug
			`by`	: the parameter to get with
			`what`	: the parameter value
			`option1` : either `callback` or `options`
			`option2` : optional `callback` if `option1` is `options`  
		*/
		clone.get = function(by, what, option1, option2){
			// GET callback and options
			if(!isset(option2)) { var callback = option1, options = null;	 }
			else 				{ var callback = option2, options = option1; }
			var sql_options = '';
			
			// APPEND options to sql query
			if(isset(options)){
				for(option in options){
					var value = options[option];
					if(option == 'order'){
						sql_options += ' ORDER BY ' + value;
					} 
					if(option == 'limit') {
						sql_options += ' ' + option.toUpperCase() + ' ' + value;
					} 
					var math = options['math'] || '=';
				}
			} else {
				var math = '=';
			}
			
			var sql = 'SELECT * FROM `' + table + '` WHERE `' + by + '` '+math+' ' + defineSQLValue(what) + sql_options;
			
			mysql(sql, function(rows, onerror){
				callback(rows, onerror, sql);
			});
		};
		/*
		clone.get 		= {
			where: function(by, what, callback, math){
				if(typeof by == 'object'){
					var callback 	= arguments[1];
					var math 		= arguments[2] || ' = ';
					var WHERE 		= '';
					for(index in by){
						var value = defineSQLValue(by[index]);
						WHERE += ' AND `' + index + '` ' + math + value;
					}
					WHERE = WHERE.substr(5);
				} else {
					var math = math || ' = ';
					var WHERE = '`' + by + '` ' + math + ' ' + defineSQLValue(what) + ' ';
				}
				var sql = 'SELECT * FROM ' + table + ' WHERE ' + WHERE ;
				
				mysql(sql, function(rows, onerror){
					callback(rows, onerror, {
						by			: by, 
						what		: what, 
						callback	: callback,
						sql			: sql
					});
				});
			},
			byID: function(id){
				var sql = 'SELECT * FROM `' + table + '` WHERE id = ' + id ;
				mysql(sql, function(rows, onerror){
					callback(rows[0], onerror, { 
						id	: id, 
						sql : sql 
					});
				});
			},
		};
		*/
		/*
		mysql.users.update('id', '42', {
			username: 'adam',
			password: 123123
		}, function(rows, onerror){
			// ...
		});
		*/
		
		clone.update = function(where, what, fields_to_update, callback){
			var set 	= ObjectToUpdateString(fields_to_update, mysql);
			
			var math 	= '=';
			var sql 	= 'UPDATE ' + table + ' SET ' + set
						+ ' WHERE `' + where + '` '+ math + ' ' + mysql.escape(what);
			mysql(sql, function(rows, onerror){
				callback(rows, onerror, sql);
			});
		}
		/*
		// Delete with Single where
		mysql.users.delete.by('id', 21, function(rows, onerror){
			// ...
		});
		
		// Delete with Multi where
		mysql.users.delete.by({
			city 	 : 'San Francisco',
			disabled : true
		}, function(rows, onerror){
			// ...
		});
		*/
		clone.delete = function(where, what, callback){
			var WHERE = '';
			if(typeof where == 'object'){
				for(field in where){
					var value = defineSQLValue(where[field]);
					WHERE += ' AND `' + field + '` = ' + value ;
				};
				WHERE = WHERE.substr(4); 
				var callback = what;
			} else {
				WHERE = '`' + where + '` = ' + defineSQLValue(what);
			}
			
			var sql = 'DELETE FROM `' + table + '` WHERE ' + WHERE;
			console.log(sql);
			mysql(sql, function(rows, onerror){
				callback(rows, onerror);
			})
		};
		
		
		return clone;
		
	}
	